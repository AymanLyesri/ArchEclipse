(deflisten music :initial ""
"playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(defpoll volume :initial "1" :interval "1s"
"pamixer --get-volume")
(defpoll time :interval "10s"
"date '+%R  %d<%m'")
(defvar eww "$HOME/.local/bin/eww/eww -c $HOME/.config/hypr/eww/eww-1")
(defpoll COL_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "~/.config/eww/bar/scripts/wifi --ICON")
(defvar wifi_rev false)

(defwindow Widget
  :monitor 0
  :windowtype "toolbar"
  ; :exclusive true
  :geometry (geometry :x "10%"
    :y "1%"
    :width "100%"
    :height "10px"
  :anchor "top center")
  ; :reserve (struts :side "top" :distance "4%")
  (bar))

(defwidget widget1 []
  (centerbox :orientation "h"
    (workspaces)
    (box :orientation "h"
      (music)
    )
    (rightPanel)
  ))



(defwidget wifi []
  (eventbox :onhover "${eww} update wifi_rev=true"
    :onhoverlost "${eww} update wifi_rev=false"
    (box :vexpand "false" :hexpand "false" :space-evenly "false"
      (button :class "module-wif" :onclick "networkmanager_dmenu" :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" WLAN_ICON)
      (revealer :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
        (label    :class "module_essid"
          :text ESSID_WLAN
          :orientation "h"
        )))))

(defwidget rightPanel []
  (box :class "rightPanel" :orientation "h" :space-evenly false :halign "end"
    (metric :label "🔊"
      :value volume
    :onchange "pamixer --set-volume {}")
    (metric :label ""
      :value {EWW_RAM.used_mem_perc}
    :onchange "")
    (metric :label "💾"
      :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
    :onchange "")
  time))

(defwidget greeter [?text name]
  (box :orientation "horizontal"
    :halign "center"
    text
    (button :onclick "notify-send 'Hello' 'Hello, ${name}'"
    "Greet")))


(defwidget music []
  (box :class "music"
    :orientation "h"
    :space-evenly false
    :halign "center"
    {music != "" ? "🎵${music}" : "Quiet..."}
    (greeter :text "Say hello!" :name "Tim")))


(defwidget metric [label value onchange]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value value
    :onchange onchange)))




