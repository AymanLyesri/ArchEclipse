#!/bin/bash

# Multi-Monitor Manager for Hyprland
# Detects device type, manages monitor configurations, and handles lid events
# Author: ArchEclipse Rice Configuration

# Configuration paths
HYPR_CONFIG_DIR="$HOME/.config/hypr"
MONITORS_CONFIG="$HYPR_CONFIG_DIR/configs/monitors.conf"
CUSTOM_MONITORS_CONFIG="$HYPR_CONFIG_DIR/configs/custom/monitors.conf"
LOGIND_CONFIG="/etc/systemd/logind.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect device type (laptop or desktop)
detect_device_type() {
    local device_type=""
    
    # Check for laptop indicators
    if [ -d "/proc/acpi/button/lid" ] || [ -f "/sys/class/power_supply/BAT0/present" ] || [ -f "/sys/class/power_supply/BAT1/present" ]; then
        device_type="laptop"
    elif lscpu | grep -q "Mobile"; then
        device_type="laptop"
    else
        device_type="desktop"
    fi
    
    # Check for internal display (eDP)
    if hyprctl monitors -j | jq -r '.[].name' | grep -q "eDP"; then
        device_type="laptop"
    fi
    
    echo "$device_type"
}

# Get monitor information
get_monitors_info() {
    hyprctl monitors -j
}

# Get internal monitor name (usually eDP-1 for laptops)
get_internal_monitor() {
    hyprctl monitors -j | jq -r '.[] | select(.name | startswith("eDP")) | .name' | head -1
}

# Get external monitors
get_external_monitors() {
    hyprctl monitors -j | jq -r '.[] | select(.name | startswith("eDP") | not) | .name'
}

# Check if AC adapter is connected
is_ac_connected() {
    local ac_status=""
    for ac in /sys/class/power_supply/A{C,DP}*; do
        if [ -f "$ac/online" ]; then
            ac_status=$(cat "$ac/online")
            if [ "$ac_status" = "1" ]; then
                return 0
            fi
        fi
    done
    return 1
}

# Check if lid is closed
is_lid_closed() {
    if [ -f "/proc/acpi/button/lid/LID0/state" ]; then
        grep -q "closed" /proc/acpi/button/lid/LID0/state
    elif [ -f "/proc/acpi/button/lid/LID/state" ]; then
        grep -q "closed" /proc/acpi/button/lid/LID/state
    else
        return 1
    fi
}

# Configure lid behavior for laptops
configure_lid_behavior() {
    local device_type=$(detect_device_type)
    
    if [ "$device_type" = "laptop" ]; then
        log "Configuring laptop lid behavior..."
        
        # Create systemd logind configuration for lid handling
        if [ ! -f "$LOGIND_CONFIG.backup" ]; then
            sudo cp "$LOGIND_CONFIG" "$LOGIND_CONFIG.backup" 2>/dev/null || true
        fi
        
        # Configure logind to ignore lid switch when external monitor is connected
        cat << EOF | sudo tee /etc/systemd/logind.conf.d/99-hyprland-lid.conf > /dev/null
[Login]
HandleLidSwitch=ignore
HandleLidSwitchExternalPower=ignore
HandleLidSwitchDocked=ignore
EOF
        
        # Restart logind service
        sudo systemctl restart systemd-logind
        
        log "Lid behavior configured successfully"
    fi
}

# Restart AGS to apply multi-monitor configuration
restart_ags() {
    log "Restarting AGS for multi-monitor support..."
    
    # Kill existing AGS instances more safely
    pkill -x "ags" 2>/dev/null || true
    
    # Wait a moment for cleanup
    sleep 1
    
    # Restart AGS
    ags run --log-file /tmp/ags.log &
    
    log "AGS restarted successfully"
}

# Generate monitor configuration based on detected setup
generate_monitor_config() {
    local device_type=$(detect_device_type)
    local internal_monitor=$(get_internal_monitor)
    local external_monitors=($(get_external_monitors))
    local config_content=""
    
    log "Generating monitor configuration for $device_type..."
    
    # Base configuration header
    config_content+="#Monitor Configuration - Auto-generated by multi-monitor-manager\n"
    config_content+="# Device Type: $device_type\n"
    config_content+="# Generated: $(date)\n\n"
    
    if [ "$device_type" = "laptop" ]; then
        if [ -n "$internal_monitor" ]; then
            config_content+="# Internal laptop display\n"
            config_content+="monitor = $internal_monitor, preferred, 0x0, 1\n\n"
        fi
        
        # Configure external monitors
        local x_offset=1920  # Default offset, will be adjusted based on internal monitor resolution
        if [ -n "$internal_monitor" ]; then
            local internal_width=$(hyprctl monitors -j | jq -r ".[] | select(.name == \"$internal_monitor\") | .width")
            x_offset=$internal_width
        fi
        
        for monitor in "${external_monitors[@]}"; do
            if [ -n "$monitor" ]; then
                config_content+="# External monitor: $monitor\n"
                config_content+="monitor = $monitor, preferred, ${x_offset}x0, 1\n\n"
                
                # Update offset for next monitor
                local monitor_width=$(hyprctl monitors -j | jq -r ".[] | select(.name == \"$monitor\") | .width")
                x_offset=$((x_offset + monitor_width))
            fi
        done
        
        # Add lid-closed configuration
        if [ ${#external_monitors[@]} -gt 0 ]; then
            config_content+="# Lid closed configuration - disable internal when external is connected\n"
            config_content+="# This will be managed dynamically by the lid event handler\n\n"
        fi
        
    else
        # Desktop configuration
        config_content+="# Desktop multi-monitor setup\n"
        config_content+="monitor = , preferred, auto, 1\n\n"
        
        # Configure each monitor explicitly if multiple are detected
        local x_offset=0
        local monitors_info=$(get_monitors_info)
        local monitor_count=$(echo "$monitors_info" | jq length)
        
        if [ "$monitor_count" -gt 1 ]; then
            for monitor in $(echo "$monitors_info" | jq -r '.[].name'); do
                config_content+="monitor = $monitor, preferred, ${x_offset}x0, 1\n"
                local monitor_width=$(echo "$monitors_info" | jq -r ".[] | select(.name == \"$monitor\") | .width")
                x_offset=$((x_offset + monitor_width))
            done
        fi
    fi
    
    # Write configuration
    mkdir -p "$(dirname "$MONITORS_CONFIG")"
    echo -e "$config_content" > "$MONITORS_CONFIG"
    
    log "Monitor configuration generated and saved to $MONITORS_CONFIG"
    
    # Restart AGS to apply multi-monitor bars
    restart_ags
}

# Handle lid events for laptops
handle_lid_event() {
    local device_type=$(detect_device_type)
    
    if [ "$device_type" != "laptop" ]; then
        return 0
    fi
    
    local internal_monitor=$(get_internal_monitor)
    local external_monitors=($(get_external_monitors))
    
    if [ -z "$internal_monitor" ]; then
        warn "No internal monitor detected"
        return 1
    fi
    
    if is_lid_closed && is_ac_connected && [ ${#external_monitors[@]} -gt 0 ]; then
        log "Lid closed with AC power and external monitor detected"
        log "Disabling internal monitor and moving workspaces to external monitor"
        
        # Disable internal monitor
        hyprctl keyword monitor "$internal_monitor,disable"
        
        # Move all workspaces to the first external monitor
        local primary_external="${external_monitors[0]}"
        if [ -n "$primary_external" ]; then
            for workspace in $(hyprctl workspaces -j | jq -r '.[].id'); do
                hyprctl dispatch moveworkspacetomonitor "$workspace" "$primary_external"
            done
            
            # Focus the external monitor
            hyprctl dispatch focusmonitor "$primary_external"
            
            # Restart AGS to update bars
            restart_ags
        fi
        
    elif ! is_lid_closed; then
        log "Lid opened, re-enabling internal monitor"
        
        # Re-enable internal monitor
        hyprctl keyword monitor "$internal_monitor,preferred,0x0,1"
        
        # Optionally redistribute workspaces
        redistribute_workspaces
        
        # Restart AGS to update bars
        restart_ags
    fi
}

# Redistribute workspaces across available monitors
redistribute_workspaces() {
    local monitors=($(hyprctl monitors -j | jq -r '.[] | select(.disabled == false) | .name'))
    local monitor_count=${#monitors[@]}
    
    if [ "$monitor_count" -le 1 ]; then
        return 0
    fi
    
    log "Redistributing workspaces across $monitor_count monitors"
    
    local workspaces=($(hyprctl workspaces -j | jq -r '.[].id' | sort -n))
    local workspaces_per_monitor=$((10 / monitor_count))
    
    local monitor_index=0
    local workspace_count=0
    
    for workspace in "${workspaces[@]}"; do
        if [ "$workspace_count" -ge "$workspaces_per_monitor" ] && [ "$monitor_index" -lt $((monitor_count - 1)) ]; then
            monitor_index=$((monitor_index + 1))
            workspace_count=0
        fi
        
        hyprctl dispatch moveworkspacetomonitor "$workspace" "${monitors[$monitor_index]}"
        workspace_count=$((workspace_count + 1))
    done
    
    # Restart AGS after workspace redistribution
    restart_ags
}

# Interactive monitor configuration
interactive_config() {
    local monitors_info=$(get_monitors_info)
    local monitor_count=$(echo "$monitors_info" | jq length)
    
    echo -e "${BLUE}=== Multi-Monitor Configuration ===${NC}"
    echo "Detected $monitor_count monitor(s):"
    echo
    
    echo "$monitors_info" | jq -r '.[] | "  \(.name): \(.width)x\(.height)@\(.refreshRate)Hz (\(.make) \(.model))"'
    echo
    
    echo "Available actions:"
    echo "1) Auto-configure monitors"
    echo "2) Configure specific monitor resolution"
    echo "3) Setup lid behavior (laptop only)"
    echo "4) Redistribute workspaces"
    echo "5) Show current configuration"
    echo "6) Exit"
    echo
    
    read -p "Select an option (1-6): " choice
    
    case $choice in
        1)
            generate_monitor_config
            hyprctl reload
            ;;
        2)
            configure_specific_monitor
            ;;
        3)
            configure_lid_behavior
            ;;
        4)
            redistribute_workspaces
            ;;
        5)
            show_current_config
            ;;
        6)
            exit 0
            ;;
        *)
            error "Invalid option"
            ;;
    esac
}

# Configure specific monitor resolution
configure_specific_monitor() {
    local monitors=($(hyprctl monitors -j | jq -r '.[].name'))
    
    echo "Available monitors:"
    for i in "${!monitors[@]}"; do
        echo "$((i+1))) ${monitors[$i]}"
    done
    echo
    
    read -p "Select monitor number: " monitor_num
    
    if [ "$monitor_num" -lt 1 ] || [ "$monitor_num" -gt "${#monitors[@]}" ]; then
        error "Invalid monitor selection"
        return 1
    fi
    
    local selected_monitor="${monitors[$((monitor_num-1))]}"
    local available_modes=$(hyprctl monitors -j | jq -r ".[] | select(.name == \"$selected_monitor\") | .availableModes[]")
    
    echo "Available modes for $selected_monitor:"
    echo "$available_modes" | nl
    echo
    
    read -p "Enter desired resolution (e.g., 1920x1080@60): " resolution
    
    if [ -n "$resolution" ]; then
        hyprctl keyword monitor "$selected_monitor,$resolution,auto,1"
        log "Resolution updated for $selected_monitor to $resolution"
    fi
}

# Show current configuration
show_current_config() {
    echo -e "${BLUE}=== Current Monitor Configuration ===${NC}"
    echo
    
    local device_type=$(detect_device_type)
    echo "Device Type: $device_type"
    echo
    
    echo "Active Monitors:"
    hyprctl monitors -j | jq -r '.[] | "  \(.name): \(.width)x\(.height)@\(.refreshRate)Hz (Position: \(.x),\(.y)) [Focus: \(.focused)]"'
    echo
    
    if [ "$device_type" = "laptop" ]; then
        echo "Laptop Status:"
        if is_lid_closed; then
            echo "  Lid: Closed"
        else
            echo "  Lid: Open"
        fi
        
        if is_ac_connected; then
            echo "  AC Power: Connected"
        else
            echo "  AC Power: Disconnected"
        fi
        echo
    fi
    
    echo "Workspace Distribution:"
    hyprctl workspaces -j | jq -r '.[] | "  Workspace \(.id): Monitor \(.monitor)"'
}

# Main function
main() {
    case "${1:-}" in
        "auto")
            generate_monitor_config
            hyprctl reload
            ;;
        "lid")
            handle_lid_event
            ;;
        "setup")
            configure_lid_behavior
            generate_monitor_config
            hyprctl reload
            ;;
        "redistribute")
            redistribute_workspaces
            ;;
        "status")
            show_current_config
            ;;
        *)
            interactive_config
            ;;
    esac
}

# Run main function with all arguments
main "$@"
